exploreResult$nsims
10^(min(2,floor(log10(max(1,exploreResult$nullresult$count)))))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
bquote(P[+])
bquote(P^+)
shiny::runApp()
shiny::runApp()
shiny::runApp()
z<-"Ppp"
list(z="abd")
list(.(z)="abd")
list((z)="abd")
l[[z]]="t"
l
a<-list("pdf"="PDF","k"="k",pPlusLabel="pNull")
a
names[a]
names(a)
names(a)[3]<-pPlusLabel
a
shiny::runApp()
shiny::runApp()
worldsList<-list("pdf"="PDF","k"="k","pNull"="pNull")
names(worldsList)[3]<-pPlusLabel
c(worldsList, "log(lk)"="S")
c(worldsList, "log(lk)"="S")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
designChoicesExtra=list("Sampling"=list("Sample Size" = "SampleSize",
"Sampling Method" = "Method",
"Sample Usage" = "Usage",
"Sample Gamma" = "SampleGamma",
"Alpha" = "Alpha"),
"Anomalies"=list("Dependence" = "Dependence",
"Outliers" = "Outliers",
"IV Range" = "IVRange",
"DV Range" = "DVRange"),
"Cheating"=list("Method" = "Cheating",
"Cheating amount" = "CheatingAmount"),
"Replications"=list("SigOnly"="SigOnly",
"Repl Power"="Power",
"Repl Repeats" = "Repeats")
)
designChoicesExtra$Sampling
names(designChoicesExtra$Sampling)[5]
names(designChoicesExtra$Sampling)[5]<-alphaChar
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
switches$showAnimation
shiny::runApp()
shiny::runApp()
shiny::runApp()
outputText[2]<-bquote(p[0])
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deparse(bquote(P[0]))
deparse(bquote(P[0]))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a<-"P[0]"
grepl("['^']{1}[0-9.{}]",a)
grepl("['[']{1}[0-9.{}]",a)
shiny::runApp()
shiny::runApp()
label<-deparse(pPlusAxisLabel)
label
mathlabel<-grepl("['^']{1}",label) || grepl("['[']{1}",label)
mathlabel
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
deparse("abc")
shiny::runApp()
lb1=nonNullPositive
mathlabel<-grepl("['^']{1}",lb1) || grepl("['[']{1}",lb1)
lb1=nonNullNegative
mathlabel<-grepl("['^']{1}",lb1) || grepl("['[']{1}",lb1)
lb1=nullNegative
mathlabel<-grepl("['^']{1}",lb1) || grepl("['[']{1}",lb1)
lb1=nullNPositive
lb1=nullPositive
mathlabel<-grepl("['^']{1}",lb1) || grepl("['[']{1}",lb1)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
bquote(a~"-ve")
a<-1
bquote(.(a)~"-ve")
bquote(.(a)^.(b)~"-ve")
b<-2
bquote(.(a)^.(b)~"-ve")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
nonNullNegative
deparse(nonNullNegative)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
ps<-isSignificant(STMethod,pVals,rVals,nVals,df1Vals,exploreResult$evidence)
colMeans(ps)
y50
a<-matrix(0,4,4)
a
a+rep(1,4)
rep(1,4)
a+1:4
a<-matrix(0,4,3)
a+1:4
a<-matrix(0,3,4)
a
a+1:4
a+tr(1:4)
a+t(1:4)
t(1:4)
1:4
t(as.vector(1:4))
a
b
b<-1:4
a+b[col(a))]
a+b[col(a)]
rep(b,3,1)
b
rep(b,c(3,1))
rep(b,3
)
rep(b,3)
rep(b,1,3)
rep(b,each=nrow(a))
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
colMeans(showVals=="Single")
shiny::runApp()
shiny::runApp()
shiny::runApp()
sigs<-isSignificant(STMethod,pVals,rVals,nVals,df1Vals,exploreResult$evidence)
nulls<-exploreResult$result$rpIVs==0
colSums(sigs & nulls)/colSums(sigs)
colSums(sigs & nulls)/max(colSums(sigs),1)
shiny::runApp()
shiny::runApp()
exploreResult$result$rpIVs
exploreResult$nullresult$rpIVs
exploreResult$nullresult
shiny::runApp()
shiny::runApp()
log10(400)
floor(log10(400))
log10(2)
log10(2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
nrow(nT)
shiny::runApp()
shiny::runApp()
shiny::runApp()
quantile(a,0.25,na.rm=TRUE)
quantile(a,0.25,na.rm=TRUE)[2]
q<-quantile(a,0.25,na.rm=TRUE)
as.number(q)
as.numeric(q)
shiny::runApp()
if (length(nullresult$rIV)>0) {
outputText<-c("\bExpected",paste("nsims=",format(length(result$rIV)),"+",format(length(nullresult$rIV)),sep=""),rep("",nc-2))
} else {
outputText<-c("\bExpected",paste("nsims=",format(length(result$rIV)),sep=""),rep("",nc-2))
}
outputText<-c(outputText,rep("",nc))
outputText<-c("\bExpected",paste("nsims=",format(length(result$rIV)),sep=""),rep("",nc-2))
outputText<-c(outputText,rep("",nc))
outputText1<-c("   ",paste0("\b",expected$Expected_par1),paste0("\b",expected$Expected_par2))
outputText<-c(outputText,rep(outputText1,nc/3))
outputText<-c(outputText,ot1,ot2,rep("  ",nc),ot4,ot5,ot6)
outputText<-c(outputText,rep("  ",nc),pSigLabel," ",paste0(format(mean(p<alpha)*100,digits=report_precision),"%"),rep(" ",nc-3))
pSigLabel
as.vector(outputText)
a<-as.vector(outputText)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
bins
y1
x
plot(x,y1)
plot(x,y1)
x
dens
diff(x)
x
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x
y1
bins
log10(bins)
10^(bins)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
bins
bins==target
max(svals)
target
max(nsvals)
min(svals[svals>target])
min(vals[nsvals>target])
vals
vals>target
shiny::runApp()
shiny::runApp()
shiny::runApp()
target
abs(svals)
abs(vals)
bins-target
bins[7]
bins[7]-target
(bins[7]-target)*10000
max(vals)
any(svals>max(vals))
get_upperEdge(abs(svals),abs(vals))
print(get_upperEdge(abs(svals),abs(vals)))
target
sum(svals>target)
sum(abs(svals)>target)
target
vals==target
any(vals==target)
any(svals==target)
any(abs(vals)==target)
any(abs(vals)==target)
any(abs(vals)==target)
bins==target
any(abs(vals)==target)
any(abs(svals)==target)
is.element(vals,bins)
is.element(vals,bins)
is.element(vals,bins)
shiny::runApp()
sdens
dens
bins
target
abs(svals)==target
abs(svals)<target
sdens
sdens<-hist(svals[use],breaks=bins,plot=FALSE,warn.unused = FALSE,right=TRUE)
sdens<-sdens$counts
sdens
dens<-hist(vals[use],breaks=bins,plot=FALSE,warn.unused = FALSE,right=TRUE)
dens<-dens$counts
dens
bins
target
vals[vals<bins[3] & vals>=bins[2]]
target<-get_upperEdge(abs(vals),abs(svals))
target
min(abs(svals))
allvals<-abs(vals)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
